
;; (setq doom-theme 'doom-dracula)

;; (setq doom-theme 'doom-henna-vi)
;; ( doom-theme 'doom-henna)
;;(load-theme 'doom-magnus)
;; (setq doom-theme 'doom-nano-dark)
;; (load-theme 'doom-nano-dark)
;; (after! doom-themes
;;   (load-theme 'doom-nano-dark t))
;; (setq doom-theme 'doom-nano-dark )

;; (after! nano-emacs
;;   (setq nano-theme-var "dark")
;;   )

                                        ; (setq doom-theme 'doom-Iosvkem) Nope
                                        ; (setq doom-theme 'doom-moonlight) Nope
                                        ; (setq doom-theme 'doom-vibrant)
                                        ; (setq doom-theme 'doom-genderfluid)
                                        ; (setq doom-theme 'doom-ir-black)
                                        ; (setq doom-theme 'doom-wilmersdorf)
;; (setq doom-theme 'poet-dark)
                                        ; (setq doom-theme 'doom-homage-black) NO
                                        ; (setq doom-theme 'doom-tomorrow-night) NO


;; (map! :map python-mode-map :nvieo "" )



                                        ; (global-set-key [remap doom/delete-frame-with-prompt] #'delete-frame)

;; (after! posframe
;;   (setq! vertico-posframe-mode nil))

;; (after! consult
;;   (setq! vertico-posframe-mode nil))

;; (after! prescient
;;   (setq vertico-prescient-mode t)
;;   (setq prescient-sort-full-matches-first t)
;;   (setq prescient-sort-full-matches-first t)
;;   (setq vertico-prescient-enable-filtering t)
;;   (setq vertico-prescient-enable-sorting t)
;;   (add-to-list 'completion-styles 'prescient ))



;;; Helm
                                        ; (when (modulep! :completion helm)
                                        ;   (map! :leader
                                        ;         (:prefix-map ("b" . "buffer")
                                        ;          :desc "Buffer" "b" #'helm-mini)
                                        ;         (:prefix-map ("s" . "search")
                                        ;          :desc "Imenu All"
                                        ;          "I" #'helm-imenu-in-all-buffers
                                        ;          :desc "Consult Ripgrep"
                                        ;          "R" #'consult-ripgrep)
                                        ;         (:prefix-map ("f" . "file")
                                        ;          :desc "Consult ls" "f" #'consult-ls-git
                                        ;          :desc "Open File Externally" "o" #'consult-file-externally
                                        ;          :desc "Open File in HOME" "h" #'find-file-at-home)
                                        ;         ("SPC" #'helm-mini)
                                        ;         (:prefix-map ("i" . "insert")
                                        ;          :desc "Insert file path"
                                        ;          "P" #'insert-path)
                                        ;         )

                                        ;   )

;;; Holo-layer
;; (add-to-list 'load-path "~/.config/doom/local-packages/holo-layer")
;; (require 'holo-layer)
;; (holo-layer-enable)


;; (map! :leader (:prefix-map ("z e" . "emms")
;;                :desc "Find Track" "/" #'consult-emms-playlists
;;                :desc "Shuffle" "s" #'emms-shuffle
;;                :desc "Next" "j" #'emms-next
;;                :desc "Prev" "k" #'emms-previous
;;                :desc "Browse" "RET" #'emms-browser
;;                :desc "Play/Pause" "SPC" #'emms-pause
;;                :desc "Albums" "l" #'emms-browser-search-by-album
;;                :desc "Artists" "a" #'emms-browser-search-by-artist
;;                ))


;;; Custom Functions

;;;; Consult


;;; Counsel
(defun counsel-find-home ()
  (interactive)
  (counsel-find-file "~/" (expand-file-name "~/")))

;;;


;; (defun read-magnus ()
;;   (interactive)
;;   (let* (
;;          (path "/home/vivien/drive/podcast-transcripts/magnus_archives/")
;;          (selected (read-file-name "Statement: " path)))

;;     (consult-find-file selected)
;;     (with-current-buffer (find-buffer-visiting (expand-file-name selected))
;;       (set-buffer-font "Nimbus Mono PS"))))
;; (face-remap-add-relative 'default '(:family "Nimbus Mono PS" ) )
;; (overlay-put (make-overlay (point-min) (point-max) nil nil t)
;;              'face '(:family "Nimbus Mono PS"))


;; (after! ispell
;;   (setq ispell-dictionary "en_US")
;;   (setq ispell-alternate-dictionary "en_US")
;;   ;; (setq ispell-alternate-dictionary "/usr/lib/ispell/english.hash")
;;   (setq company-ispell-dictionary ispell-dictionary)
;; )
;; ;; https://www.emacswiki.org/emacs/EchoArea
                                        ;(defadvice message (around message-filter-by-regexp activate)
                                        ;  (if (not (ad-get-arg 0))
                                        ;      ad-do-it
                                        ;    (let ((formatted-string (apply 'format (ad-get-args 0))))
                                        ;      (if (stringp formatted-string)
                                        ;          (save-excursion
                                        ;            (set-buffer "*Messages*")
                                        ;            (goto-char (point-max))
                                        ;            (insert formatted-string "\n"))
                                        ;       (progn
                                        ;          (ad-set-args 0 `("%s" ,formatted-string))
                                        ;          ad-do-it)))))








;; (defun org-blockify-comment (region))
;; Basically, take a bunch of # comments, and place them inside a block
;; Process: Wrapped in save-excursion: Construct region, call uncomment on region, mark it, insert comment structure template.


;; (defun find-commented-region (start comment-char))

(defun my-evil-fix ()
  "Searching for a number messes up evil for whatever reason. This worked to fix it now, at least"
  (interactive)
  (setq evil-ex-search-history (cdr evil-ex-search-history))
  (setq evil-search-forward-history (cdr evil-ex-search-forward-history))
  (setq evil-ex-history (cdr evil-ex-history))

  (setq evil-ex-search-pattern '("clean" t t)))


  ;; (setq hl-todo-keyword-faces
  ;;       '(
  ;;         ("TODO" . "#dc752f")
  ;;         ("NEXT" . "#dc752f")
  ;;         ("THEM" . "#2d9574")
  ;;         ("PROG" . "#4f97d7")
  ;;         ("OKAY" . "#4f97d7")
  ;;         ("DONT" . "#f2241f")
  ;;         ("FAIL" . "#f2241f")
  ;;         ("DONE" . "#86dc2f")
  ;;         ("NOTE" . "#b1951d")
  ;;         ("KLUDGE" . "#b1951d")
  ;;         ("HACK" . "#b1951d")
  ;;         ("TEMP" . "#b1951d")
  ;;         ("FIXME" . "#dc752f")
  ;;         ("XXX+" . "#dc752f")
  ;;         ("\\?\\?\\?+" . "#dc752f")
  ;;         ("IDEA" . "#2d9574")
  ;;         ("CITE" . "#dc752f")
  ;;         ("OBVIOUS" . "#dc752f")
  ;;         ("PHRASING" . "#dc752f")
  ;;         ("LACKING" . "#dc752f")))

;; (after! woman
;;   (setq! woman-manpath '("/usr/local/man/" "/home/vivien/anaconda3/share/man/" "/home/vivien/funny-manpages/" "/usr/share/man/" "/usr/man" "/usr/share/man" "/usr/local/share/man"
;;                          ("/bin" . "/usr/share/man")
;;                          ("/usr/bin" . "/usr/share/man")
;;                          ("/sbin" . "/usr/share/man")
;;                          ("/usr/sbin" . "/usr/share/man")
;;                          ("/usr/local/bin" . "/usr/local/man")
;;                          ("/usr/local/bin" . "/usr/local/share/man")
;;                          ("/usr/local/sbin" . "/usr/local/man")
;;                          ("/usr/local/sbin" . "/usr/local/share/man")
;;                          ("/usr/X11R6/bin" . "/usr/X11R6/man")
;;                          ("/usr/bin/X11" . "/usr/X11R6/man")
;;                          ("/usr/games" . "/usr/share/man")
;;                          ("/opt/bin" . "/opt/man")
;;                          ("/opt/sbin" . "/opt/man"))
;;          )
;;   )

  ;; (setq org-fontify-quote-and-verse-blocks nil
  ;;       org-fontify-whole-heading-line nil
  ;;       org-hide-leading-stars nil
  ;;       org-startup-indented nil)

  ;; (add-hook! 'writeroom-mode-hook (lambda () (message "hooked") (setq doom--line-number-style nil) (setq display-line-numbers nil) ))
  ;; (add-hook! 'writeroom-mode-enable-hook (lambda () (message "hooked") (setq doom--line-number-style nil) (setq display-line-numbers nil) ))
  ;; (add-hook! 'org-mode-hook (writeroom-mode))
  ;; (add-hook! 'org-mode-hook (book-mode))

  ;; (add-hook 'org-mode-hook 'turn-off-smartparens-mode)
  ;; (add-hook! 'org-mode-hook (lambda () (message "hooked") (setq doom--line-number-style nil) (setq display-line-numbers nil) ))

  ;; (add-hook! 'markdown-mode-hook (book-mode))
  ;; (add-hook! 'markdown-mode-hook (lsp!))

(after! matlab-mode
  (defun matlab-mode-vf-functionname (&optional fast) ()))
(after! eat
  (setq! eat-shell "/bin/xonsh"
         eat--terminfo-path "/home/vivien/.config/emacs/.local/straight/repos/eat/terminfo"
         eat--install-path "/home/vivien/.config/emacs/.local/straight/repos/eat"
         eat--load-file-path "/home/vivien/.config/emacs/.local/straight/repos/eat/eat.el"
         eat--shell-integration-path "/home/vivien/.config/emacs/.local/straight/repos/eat/integration"
         ))

;; (setq doom-font (font-spec :family "Fira Code" :size 15))
;; (setq doom-font (font-spec :family "Source Code Pro" :size 16)) ;; 14 if not monitr
;; (setq doom-font (font-spec :family "FiraCode Nerd Font Propo" :size 16)) ;; 14 if not monitr
;; (setq doom-variable-pitch-font (font-spec :family "Latin Modern Roman" :size 14))
;; (setq doom-variable-pitch-font (font-spec :family "Roboto Slab" :size 15))
;; (setq doom-variable-pitch-font (font-spec :family "FairyDustB" :size 14))
;; (setq doom-variable-pitch-font (font-spec :family "Montserrat" :size 14))
;; (setq doom-variable-pitch-font (font-spec :family "Metamorphous" :size 14))
;; (setq doom-variable-pitch-font (font-spec :family "Nimbus Roman" :size 14))

;; (setq doom-variable-pitch-font (font-spec :family "Foglihten" :size 15))
;; (setq doom-variable-pitch-font (font-spec :family "Z003" :size 14))


;;; Nano
;; (use-package! nano)
;; (use-package! doom-nano-modeline
;;   :config
;;   (doom-nano-modeline-mode 1)
;;   (global-hide-mode-line-mode 1))


;;; Elfeed/RSS

(add-hook 'elfeed-search-mode-hook #'elfeed-update)
(setq rmh-elfeed-org-files '("~/.config/doom/elfeed.org"))
(defun 161-ssh ()
  (interactive)
  (let ((user (completing-read "Select user: " (list "remus" "spica" "polaris" "vega" "deneb" "antares" "rigel"))))
    (find-file (format "/ssh:%s@127.0.0.1#16122:" user))))
